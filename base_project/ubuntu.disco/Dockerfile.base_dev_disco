FROM mrsono0/base_project:base_disco

ENV DEBIAN_FRONTEND noninteractive
RUN sed -i "s/archive.ubuntu.com/mirror.kakao.com/g" /etc/apt/sources.list
# RUN sed -i "s/archive.canonical.com/mirror.kakao.com/g" /etc/apt/sources.list
RUN sed -i "s/security.ubuntu.com/mirror.kakao.com/g" /etc/apt/sources.list
RUN sed -i "s/# deb-src/deb-src/g" /etc/apt/sources.list
RUN apt-get -y update --fix-missing
RUN apt-get -yy upgrade

RUN apt-get install -y \
    bzip2 \
    g++ \
    gcc \
    build-essential \
    fontconfig && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV MINICONDA_HOME /opt/conda
ENV MINICONDA_VERSION 4.5.12
ENV PATH /opt/conda/bin:$PATH
ENV PATH $MINICONDA_HOME/bin:$PATH
RUN echo "export MINICONDA_HOME=${MINICONDA_HOME}" >> /etc/profile
RUN echo "export PATH=${MINICONDA_HOME}/bin:$PATH" >> /etc/profile
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-$MINICONDA_VERSION-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

RUN pip install --no-cache-dir --upgrade setuptools pip
RUN conda update -n base -c defaults conda -y

ENV JAVA_HOME /usr/lib/jvm/default-jvm
ENV PATH $JAVA_HOME/bin:$PATH
RUN echo "export JAVA_HOME=${JAVA_HOME}" >> /etc/profile
RUN echo "export PATH=${JAVA_HOME}/bin:$PATH" >> /etc/profile
ENV JAVA_VERSION 11.0.2
ENV JAVA_URL https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
ENV JAVA_SHA256 99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57
ENV JAVA_INSTALL_PATH /usr/lib/jvm/openjdk-11
RUN set -eux; \
	\
	curl -fL -o /openjdk.tgz "$JAVA_URL"; \
	echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -; \
	mkdir -p "$JAVA_INSTALL_PATH"; \
	tar --extract --file /openjdk.tgz --directory "$JAVA_INSTALL_PATH" --strip-components 1; \
	rm /openjdk.tgz; \
	\
	ln -sf "$JAVA_INSTALL_PATH" /usr/lib/jvm/default-jvm; \
	ln -sf "$JAVA_INSTALL_PATH" /usr/lib/jvm/latest
RUN cd /usr/local/bin \
    && ln -s "${JAVA_HOME}"/bin/java java \
    && ln -s "${JAVA_HOME}"/bin/javac javac

ENV NODE_VERSION 11.10.0
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    ppc64el) ARCH='ppc64le';; \
    s390x) ARCH='s390x';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7l';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && set -ex \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && rm -f "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs

ENV YARN_VERSION 1.13.0
RUN set -ex \
    && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
    && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
    && mkdir -p /opt \
    && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
    && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
    && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
    && rm -f yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz
# RUN yarn self-update

ENV SCALA_HOME=/usr/share/scala
ENV PATH $SCALA_HOME/bin:$PATH
RUN echo "export SCALA_HOME=${SCALA_HOME}" >> /etc/profile
RUN echo "export PATH=${SCALA_HOME}/bin:$PATH" >> /etc/profile
ENV SCALA_VERSION=2.12.8
RUN cd "/tmp" && \
    wget "https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz" && \
    tar xzf "scala-${SCALA_VERSION}.tgz" && \
    mkdir "${SCALA_HOME}" && \
    rm "/tmp/scala-${SCALA_VERSION}/bin/"*.bat && \
    mv "/tmp/scala-${SCALA_VERSION}/bin" "/tmp/scala-${SCALA_VERSION}/lib" "${SCALA_HOME}" && \
    ln -s "${SCALA_HOME}/bin/"* "/usr/bin/" && \
    rm -rf "/tmp/"*

ENV KOTLIN_HOME /usr/lib/kotlinc
ENV PATH $PATH:$KOTLIN_HOME/bin
RUN echo "export KOTLIN_HOME=${KOTLIN_HOME}" >> /etc/profile
RUN echo "export PATH=${KOTLIN_HOME}/bin:$PATH" >> /etc/profile
ENV KOTLIN_VERSION=1.3.21
RUN cd /usr/lib && \
    wget https://github.com/JetBrains/kotlin/releases/download/v$KOTLIN_VERSION/kotlin-compiler-$KOTLIN_VERSION.zip && \
    unzip kotlin-compiler-*.zip && \
    rm kotlin-compiler-*.zip && \
    rm -f kotlinc/bin/*.bat

ENV GO_HOME /usr/local/go
ENV PATH $PATH:$GO_HOME/bin
RUN echo "export GO_HOME=${GO_HOME}" >> /etc/profile
RUN echo "export PATH=${GO_HOME}/bin:$PATH" >> /etc/profile
ENV GOVERSION=1.12
RUN echo "Downloading Go ${GOVERSION}" && \
    echo curl -o /tmp/go.tar.gz -J -L "https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz" && \
    curl -o /tmp/go.tar.gz -J -L "https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz" && \
    echo "Installing Go ${GOVERSION}" && \
    sudo tar -zxf /tmp/go.tar.gz -C /usr/local/ && \
    rm -f /tmp/go.tar.gz

RUN apt-get purge && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
