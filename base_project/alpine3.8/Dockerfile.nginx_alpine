FROM mrsono0/base_project:miniconda_alpine

RUN echo "http://dl-3.alpinelinux.org/alpine/v3.8/main" > /etc/apk/repositories && \
    echo "http://dl-3.alpinelinux.org/alpine/v3.8/community" >> /etc/apk/repositories && \
    echo "http://dl-3.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
RUN apk update && \
    apk upgrade

# ENV JAVA_HOME /usr/lib/jvm/default-jvm
# ENV PATH $JAVA_HOME/bin:/opt/conda/bin:$PATH
# RUN echo "export PATH=${JAVA_HOME}/bin:/opt/conda/bin:$PATH" >> /etc/profile

# # http://jdk.java.net/
# ENV JAVA_VERSION 13-ea+5
# ENV JAVA_URL https://download.java.net/java/early_access/alpine/5/binaries/openjdk-13-ea+5_linux-x64-musl_bin.tar.gz
# ENV JAVA_SHA256 ce179bb08dff9980a7cca20df1b87b9556c5c71f3cf2fefbcf31d9bfa25b1804
# RUN set -eux; \
# 	\
# 	wget -O /openjdk.tgz "$JAVA_URL"; \
# 	# echo "$JAVA_SHA256 */openjdk.tgz" | sha256sum -c -; \
# 	mkdir -p /usr/lib/jvm/openjdk-13; \
# 	tar --extract --file /openjdk.tgz --directory /usr/lib/jvm/openjdk-13 --strip-components 1; \
#   ln -sf /usr/lib/jvm/openjdk-13 /usr/lib/jvm/default-jvm; \
# 	rm /openjdk.tgz

# ENV MINICONDA_VER latest
# ENV MINICONDA Miniconda3-$MINICONDA_VER-Linux-x86_64.sh
# ENV MINICONDA_URL https://repo.continuum.io/miniconda/$MINICONDA
# # https://repo.continuum.io/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh

# # Create nbuser user with UID=1000 and in the 'users' group
# RUN mkdir -p /opt/conda && \
#   curl -L $MINICONDA_URL -o miniconda.sh && \
#   /bin/bash miniconda.sh -f -b -p /opt/conda && \
#   rm miniconda.sh && \
#   /opt/conda/bin/conda install conda python=3.6.8 --yes && \
#   ln -s /opt/conda/bin/conda /usr/bin/conda && \
#   conda clean --yes --all && \
#   rm -rf /var/cache/apk/*

# RUN ln -fs /opt/conda/bin/pip /usr/bin/pip && \
#   ln -fs /opt/conda/bin/pip /usr/bin/pip3 && \
#   ln -fs /opt/conda/bin/python3.6 /usr/bin/python && \
#   ln -fs /opt/conda/bin/python3.6 /usr/bin/python3.6
# RUN pip install --no-cache-dir --upgrade setuptools pip

ENV NGINX_VERSION 1.15.8

RUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \
	&& CONFIG="\
		--prefix=/etc/nginx \
		--sbin-path=/usr/sbin/nginx \
		--modules-path=/usr/lib/nginx/modules \
		--conf-path=/etc/nginx/nginx.conf \
		--error-log-path=/var/log/nginx/error.log \
		--http-log-path=/var/log/nginx/access.log \
		--pid-path=/var/run/nginx.pid \
		--lock-path=/var/run/nginx.lock \
		--http-client-body-temp-path=/var/cache/nginx/client_temp \
		--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
		--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
		--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
		--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
		--user=nginx \
		--group=nginx \
		--with-http_ssl_module \
		--with-http_realip_module \
		--with-http_addition_module \
		--with-http_sub_module \
		--with-http_dav_module \
		--with-http_flv_module \
		--with-http_mp4_module \
		--with-http_gunzip_module \
		--with-http_gzip_static_module \
		--with-http_random_index_module \
		--with-http_secure_link_module \
		--with-http_stub_status_module \
		--with-http_auth_request_module \
		--with-http_xslt_module=dynamic \
		--with-http_image_filter_module=dynamic \
		--with-http_geoip_module=dynamic \
		--with-threads \
		--with-stream \
		--with-stream_ssl_module \
		--with-stream_ssl_preread_module \
		--with-stream_realip_module \
		--with-stream_geoip_module=dynamic \
		--with-http_slice_module \
		--with-mail \
		--with-mail_ssl_module \
		--with-compat \
		--with-file-aio \
		--with-http_v2_module \
	" \
	&& addgroup -S nginx \
	&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \
	&& apk add --no-cache \
		gcc \
		libc-dev \
		make \
		openssl-dev \
		pcre-dev \
		zlib-dev \
		linux-headers \
		curl \
		gnupg1 \
		libxslt-dev \
		gd-dev \
		geoip-dev \
	&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \
	&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& found='' \
	# for server in \
	# 	ha.pool.sks-keyservers.net \
	# 	hkp://keyserver.ubuntu.com:80 \
	# 	hkp://p80.pool.sks-keyservers.net:80 \
	# 	pgp.mit.edu \
	# ; do \
	# 	echo "Fetching GPG key $GPG_KEYS from $server"; \
	# 	gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; \
	# done; \
	# test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; \
	# gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \
	&& rm -rf "$GNUPGHOME" nginx.tar.gz.asc \
	&& mkdir -p /usr/src \
	&& tar -zxC /usr/src -f nginx.tar.gz \
	&& rm nginx.tar.gz \
	&& cd /usr/src/nginx-$NGINX_VERSION \
	&& ./configure $CONFIG --with-debug \
	&& make -j$(getconf _NPROCESSORS_ONLN) \
	&& mv objs/nginx objs/nginx-debug \
	&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \
	&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \
	&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \
	&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \
	&& ./configure $CONFIG \
	&& make -j$(getconf _NPROCESSORS_ONLN) \
	&& make install \
	&& rm -rf /etc/nginx/html/ \
	&& mkdir /etc/nginx/conf.d/ \
	&& mkdir -p /usr/share/nginx/html/ \
	&& install -m644 html/index.html /usr/share/nginx/html/ \
	&& install -m644 html/50x.html /usr/share/nginx/html/ \
	&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \
	&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \
	&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \
	&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \
	&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \
	&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \
	&& strip /usr/sbin/nginx* \
	&& strip /usr/lib/nginx/modules/*.so \
	&& rm -rf /usr/src/nginx-$NGINX_VERSION \
	\
	# Bring in gettext so we can get `envsubst`, then throw
	# the rest away. To do this, we need to install `gettext`
	# then move `envsubst` out of the way so `gettext` can
	# be deleted completely, then move `envsubst` back.
	&& apk add --no-cache gettext \
	&& mv /usr/bin/envsubst /tmp/ \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache $runDeps \
	# && apk del .build-deps \
	# && apk del .gettext \
	&& mv /tmp/envsubst /usr/local/bin/ \
	\
	# Bring in tzdata so users could set the timezones through the environment
	# variables
	# && apk add --no-cache tzdata \
	# \
	# forward request and error logs to docker log collector
	&& ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log

COPY alpine/nginx.conf /etc/nginx/nginx.conf

# Standard set up Nginx finished
EXPOSE 80
# # Expose 443, in case of LTS / HTTPS
EXPOSE 443

# Install uWSGI
RUN apk add --no-cache uwsgi-python3

# Make NGINX run on the foreground
RUN echo "daemon off;" >> /etc/nginx/nginx.conf
# Copy the modified Nginx conf
COPY alpine/nginx-custom.conf /etc/nginx/conf.d/nginx.conf
# Copy the base uWSGI ini file to enable default dynamic uwsgi process number
COPY alpine/uwsgi.ini /etc/uwsgi/

RUN echo "[program:nginx]" >> /etc/supervisor.d/supervisord.ini
RUN echo "command=/usr/sbin/nginx" >> /etc/supervisor.d/supervisord.ini
RUN echo "stdout_logfile=/dev/stdout" >> /etc/supervisor.d/supervisord.ini
RUN echo "stdout_logfile_maxbytes=0" >> /etc/supervisor.d/supervisord.ini
RUN echo "stderr_logfile=/dev/stderr" >> /etc/supervisor.d/supervisord.ini
RUN echo "stderr_logfile_maxbytes=0" >> /etc/supervisor.d/supervisord.ini
# Graceful stop, see http://nginx.org/en/docs/control.html
RUN echo "stopsignal=QUIT" >> /etc/supervisor.d/supervisord.ini
RUN echo "autostart=true" >> /etc/supervisor.d/supervisord.ini
RUN echo "autorestart=true" >> /etc/supervisor.d/supervisord.ini
RUN echo "exitcodes=1" >> /etc/supervisor.d/supervisord.ini
RUN echo "priority=1" >> /etc/supervisor.d/supervisord.ini

RUN echo "[program:uwsgi]" >> /etc/supervisor.d/supervisord.ini
RUN echo "command=/usr/sbin/uwsgi --ini /etc/uwsgi/uwsgi.ini" >> /etc/supervisor.d/supervisord.ini
RUN echo "stdout_logfile=/dev/stdout" >> /etc/supervisor.d/supervisord.ini
RUN echo "stdout_logfile_maxbytes=0" >> /etc/supervisor.d/supervisord.ini
RUN echo "stderr_logfile=/dev/stderr" >> /etc/supervisor.d/supervisord.ini
RUN echo "stderr_logfile_maxbytes=0" >> /etc/supervisor.d/supervisord.ini
RUN echo "autostart=true" >> /etc/supervisor.d/supervisord.ini
RUN echo "autorestart=true" >> /etc/supervisor.d/supervisord.ini
RUN echo "exitcodes=1" >> /etc/supervisor.d/supervisord.ini
RUN echo "priority=2" >> /etc/supervisor.d/supervisord.ini

# Which uWSGI .ini file should be used, to make it customizable
ENV UWSGI_INI /workspace/app/uwsgi.ini

# By default, run 2 processes
ENV UWSGI_CHEAPER 2

# By default, when on demand, run up to 16 processes
ENV UWSGI_PROCESSES 16

# By default, allow unlimited file sizes, modify it to limit the file sizes
# To have a maximum of 1 MB (Nginx's default) change the line to:
# ENV NGINX_MAX_UPLOAD 1m
ENV NGINX_MAX_UPLOAD 0

# By default, Nginx will run a single worker process, setting it to auto
# will create a worker for each CPU core
ENV NGINX_WORKER_PROCESSES 1

# By default, Nginx listens on port 80.
# To modify this, change LISTEN_PORT environment variable.
# (in a Dockerfile or with an option for `docker run`)
ENV LISTEN_PORT 80

# Copy the entrypoint that will generate Nginx additional configs
COPY alpine/entrypoint_nginx.sh /usr/local/bin/entrypoint_nginx.sh
RUN chmod +x /usr/local/bin/entrypoint_nginx.sh

ENTRYPOINT ["/usr/local/bin/entrypoint_nginx.sh"]

# Add demo app
COPY alpine/app /workspace/app
WORKDIR /workspace/app

CMD ["/usr/bin/supervisord", "-n"]